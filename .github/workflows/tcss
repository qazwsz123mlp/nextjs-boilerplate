<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Mobile Snake Game</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: #f0f0f0;
            touch-action: none;
        }
        #gameContainer {
            position: relative;
            width: 300px;
            height: 300px;
            margin: 20px auto;
        }
        #gameCanvas {
            border: 2px solid #333;
            background-color: #fff;
        }
        #score {
            font-size: 24px;
            margin: 10px 0;
            font-family: Arial, sans-serif;
        }
        #controls {
            margin-top: 20px;
            display: grid;
            grid-template-columns: repeat(3, 60px);
            grid-template-rows: repeat(3, 60px);
            gap: 5px;
        }
        .control-btn {
            width: 100%;
            height: 100%;
            border: none;
            background-color: #4CAF50;
            color: white;
            border-radius: 5px;
            font-size: 20px;
            touch-action: none;
        }
        .control-btn:active {
            background-color: #45a049;
        }
        #startBtn {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 18px;
            background-color: #2196F3;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        #startBtn:active {
            background-color: #1976D2;
        }
    </style>
</head>
<body>
    <div id="score">Score: 0</div>
    <div id="gameContainer">
        <canvas id="gameCanvas" width="300" height="300"></canvas>
    </div>
    <button id="startBtn">Start Game</button>
    <div id="controls">
        <div></div>
        <button class="control-btn" id="upBtn">↑</button>
        <div></div>
        <button class="control-btn" id="leftBtn">←</button>
        <div></div>
        <button class="control-btn" id="rightBtn">→</button>
        <div></div>
        <button class="control-btn" id="downBtn">↓</button>
        <div></div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const startBtn = document.getElementById('startBtn');
        
        const gridSize = 15;
        const tileCount = 20;
        let score = 0;
        
        let snake = [
            {x: 10, y: 10},
        ];
        let food = {
            x: Math.floor(Math.random() * tileCount),
            y: Math.floor(Math.random() * tileCount)
        };
        
        let dx = 0;
        let dy = 0;
        let gameInterval;
        let gameSpeed = 150;
        
        function drawGame() {
            clearCanvas();
            moveSnake();
            drawSnake();
            drawFood();
            checkCollision();
        }
        
        function clearCanvas() {
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }
        
        function drawSnake() {
            ctx.fillStyle = 'green';
            snake.forEach(segment => {
                ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize - 2, gridSize - 2);
            });
        }
        
        function drawFood() {
            ctx.fillStyle = 'red';
            ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 2, gridSize - 2);
        }
        
        function moveSnake() {
            const head = {x: snake[0].x + dx, y: snake[0].y + dy};
            snake.unshift(head);
            
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                scoreElement.textContent = `Score: ${score}`;
                generateFood();
            } else {
                snake.pop();
            }
        }
        
        function generateFood() {
            food = {
                x: Math.floor(Math.random() * tileCount),
                y: Math.floor(Math.random() * tileCount)
            };
            
            // Make sure food doesn't appear on snake
            while (snake.some(segment => segment.x === food.x && segment.y === food.y)) {
                food = {
                    x: Math.floor(Math.random() * tileCount),
                    y: Math.floor(Math.random() * tileCount)
                };
            }
        }
        
        function checkCollision() {
            const head = snake[0];
            
            // Wall collision
            if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
                gameOver();
                return;
            }
            
            // Self collision
            for (let i = 1; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    gameOver();
                    return;
                }
            }
        }
        
        function gameOver() {
            clearInterval(gameInterval);
            alert(`Game Over! Score: ${score}`);
            resetGame();
        }
        
        function resetGame() {
            snake = [{x: 10, y: 10}];
            food = {
                x: Math.floor(Math.random() * tileCount),
                y: Math.floor(Math.random() * tileCount)
            };
            dx = 0;
            dy = 0;
            score = 0;
            scoreElement.textContent = `Score: ${score}`;
            startBtn.style.display = 'block';
        }
        
        function startGame() {
            if (gameInterval) {
                clearInterval(gameInterval);
            }
            resetGame();
            gameInterval = setInterval(drawGame, gameSpeed);
            startBtn.style.display = 'none';
        }
        
        startBtn.addEventListener('click', startGame);
        
        // Control buttons
        document.getElementById('upBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (dy === 1) return; // Prevent reversing
            dx = 0;
            dy = -1;
        });
        
        document.getElementById('downBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (dy === -1) return;
            dx = 0;
            dy = 1;
        });
        
        document.getElementById('leftBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (dx === 1) return;
            dx = -1;
            dy = 0;
        });
        
        document.getElementById('rightBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (dx === -1) return;
            dx = 1;
            dy = 0;
        });
        
        // Keyboard controls
        document.addEventListener('keydown', (e) => {
            switch(e.key) {
                case 'ArrowUp':
                    if (dy === 1) return;
                    dx = 0;
                    dy = -1;
                    break;
                case 'ArrowDown':
                    if (dy === -1) return;
                    dx = 0;
                    dy = 1;
                    break;
                case 'ArrowLeft':
                    if (dx === 1) return;
                    dx = -1;
                    dy = 0;
                    break;
                case 'ArrowRight':
                    if (dx === -1) return;
                    dx = 1;
                    dy = 0;
                    break;
            }
        });
        
        // Prevent scrolling when touching the canvas
        document.body.addEventListener('touchstart', function(e) {
            if (e.target.nodeName === 'CANVAS') {
                e.preventDefault();
            }
        }, { passive: false });
        
        document.body.addEventListener('touchmove', function(e) {
            if (e.target.nodeName === 'CANVAS') {
                e.preventDefault();
            }
        }, { passive: false });
    </script>
</body>
</html>
